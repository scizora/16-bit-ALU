module mojo_top_remake (
    input clk,              // clock input of 50MHz
    input rst_n,            // reset button input 
    output led [8],         // 8 user controllable LEDs
    input cclk,             // AVR ready when high configuration clock,
    output spi_miso,        // AVR SPI MISO
    input spi_ss,           // AVR SPI Slave Select
    input spi_mosi,         // AVR SPI MOSI
    input spi_sck,          // AVR SPI Clock
    output spi_channel [4], // AVR general purpose pins (used by default to select ADC channel)
    input avr_tx,           // AVR TX (FPGA RX)
    output avr_rx,          // AVR RX (FPGA TX)
    input io_button [5],    // 5 buttons on IO Shield
    input io_dip [3][8],    // DIP switches on IO Shield
    input button,
    input avr_rx_busy,      // AVR RX buffer full
    output io_led [3][8],   // LEDs on IO Shield
    output io_seg [8],      // 7-segment LEDs on IO Shield
    output io_sel [4]      // Digit select on IO Shield
  ) {
  
   sig rst;                  // reset signal
  
  .clk(clk) {
    // The reset conditioner is used to synchronize the reset signal to the FPGA
    // clock. This ensures the entire FPGA comes out of reset at the same time.
    reset_conditioner reset_cond;

    
    .rst(rst){
     
      dff store_alufn[6];
      dff counter[29]; 
      dff store_lightDot[16];      


      fsm gamefsm (.clk(clk), .rst(rst)) = {SELECT_DIFF, IDLE, GAME_START,
      SCORE10, SCORE9, SCORE8, SCORE7, SCORE6, SCORE5,
        SCORE4, SCORE3, SCORE2, SCORE1, SCORE0,
        CHECK_END, END}; //hardcode all these mf
      multi_seven_seg seg;  //using module multi_seven_seg
    }
  }
  
  sig alufn[6];
  sig alu[16];
  sig lightDot[16];
  sig a[16];
  sig b[16];
  
  alu alumod;               //creating instance of alu
  const TIMER_EASY = 28;         //constant for clock to switch states
  const TIMER_MED = 20;     //change these later
  const TIMER_HARD = 12;

  always {
    reset_cond.in = ~rst_n; // input raw inverted reset signal
    rst = reset_cond.out;   // conditioned reset
    
    led = 8h00;             // turn LEDs off
    spi_miso = bz;          // not using SPI
    spi_channel = bzzzz;    // not using flags
    avr_rx = bz;            // not using serial port
    
    io_led = 3x{{8h00}};    // turn LEDs off
    io_seg = 8hff;          // turn segments off
    io_sel = 4hf;           // select no digits
    
    seg.values = {5h0,5h0,5h0,5h0}; //initialising values of seven segment display
    io_sel = ~4h0;
    lightDot = 8h0;                //initialising value of a
    a = 8h0;                //initialising value of a
    b = 8h0;                //initialising value of b
    
    alufn = io_dip[0][7:2]; //assigning dip switches to alufn input
    alumod.alufn = alufn;   //connecting alufn to input of module alu
    alumod.a = a;           //connecting a to input of module alu
    alumod.b = b;           //connecting a to input of module alu
    alu = alumod.alu;       //connecting alu to output of module alu
    io_led[0] = a[7:0];    //keep these for debugging
    io_led[1] = a[15:8];
  }
}
